Техническое задание на установку и настройку ролей с помощью Ansible:

1. Установить на сервер ubuntu 20.04 (ub2srv) следующие сервисы:
- Apache
- PHP
- nginx
- Zabbix-agent
- bind9
- Postfix
- Dovecot
-filebeat (но через команду dpkg -i подготовленного файла filebeat-***-*****8.deb в папке ~/ansible/ )
Использовать команду ansible-galaxy init для установки всех сервисов только один раз, максимум 2-3 раза.

2. Запустить все установленные сервисы на сервере с ай-пи адресом 10.8.0.6. Необходимо произвести базовую настройку каждого сервиса.

3. На сервере CentOS 7 (cnt7srv) с адресом 10.8.0.7 установить следующие сервисы:
- PostgreSQL-12
- Zabbix-agent
- elasticsearch

4. На сервере ub1srv, который будет использоваться для проигрывания плейбуков Ansible, установить ОС Ubuntu 20.04.

5. Все созданные новые роли для каждого сервиса выгрузить  GitHub без чувствительных данных.

6. Настроить доступность следующих сервисов снаружи:
- zabbix-server
- Kibana
- Grafana
- nginx

Необходимо назначить пароли для каждого сервиса.

7. В файле hosts прописать сервера, с которыми будет производиться подключение по ssh-ключу.

8. Конфигурационные файлы каждого сервиса должны находиться в папке templates в формате *.conf.j2 . В папке vars файл main.yml - подменные значения, в папке handlers в файле main.yml устанавливаемые состояния для службы

Сначала создадим все необходимые роли. Ansible Galaxy предоставляет возможность для создания структуры, которую Ansible ожидает от своих ролей. Мы также можем создать объединенную роль для всех сервисов для более простой организации:

ansible-galaxy init server_setup


Это создаст структуру директорий с предопределенными папками для handlers, tasks, files, templates и vars. 

Теперь создайте основной плейбук (например, main.yml), который будет включать в себя все наши роли:

- name: Setup servers
  hosts: all
  gather_facts: true
  become: true
  roles:
    - server_setup


В этом плейбуке мы определяем, что хотим выполнить роль server_setup на всех наших серверах. 

Теперь давайте приступим к настройке роли. 

Создайте файл tasks/main.yml в директории роли server_setup:

- name: Install Apache
  apt: 
    name: apache2
    state: present
  when: ansible_os_family == "Debian"
  
- name: Install PHP
  apt: 
    name: 
      - php
      - libapache2-mod-php
    state: present
  when: ansible_os_family == "Debian"

- name: Install Nginx
  apt: 
    name: nginx
    state: present
  when: ansible_os_family == "Debian"

# and so on for each service...


Создайте файл handlers/main.yml в директории роли server_setup:

- name: start apache
  service: 
    name: apache2
    state: started
  listen: configure apache
# and so on for each service...


Создайте файл vars/main.yml в директории роли server_setup и укажите там все необходимые переменные:

zabbix_agent_password: secure_password
# and so on for each service variables...


Ваши файлы шаблонов могут быть размещены в каталоге templates и затем использованы в ваших задачах. Создайте файлы с расширением .j2 для каждого сервиса в папке templates.

Например, для Apache вы можете создать файл apache2.conf.j2 в папке templates:

<Directory /var/www/>
 Options Indexes FollowSymLinks
 AllowOverride All
 Require all granted
</Directory>

# and so on for each service...



И затем, ссылка на него в задачах роли:

- name: Configure Apache
  template: 
    src: templates/apache2.conf.j2
    dest: /etc/apache2/apache2.conf
  notify: configure apache


Настройка файла hosts подразумевает добавление информации о каждом доступном хосте:

[ub2srv]
10.8.0.6 ansible_ssh_private_key_file=~/.ssh/id_rsa

[cnt7srv]
10.8.0.7 ansible_ssh_private_key_file=~/.ssh/id_rsa

[ub1srv]
your-ub1srv-ip ansible_ssh_private_key_file=~/.ssh/id_rsa


В файле hosts каждая секция определяет группу хостов, и хосты могут быть указаны по имени или по IP-адресу. 

Рекомендуется также добавить секцию, которая объединяет несколько групп вместе:

[webservers:children]
ub2srv
cnt7srv
ub1srv


Вы должны настроить Ansible для использования этого файла хостов, отредактировав файл ansible.cfg и убедившись, что следующая строка присутствует и указывает на правильное местоположение:

[defaults]
inventory = /etc/ansible/hosts


Подменные значения для служб в файле vars/main.yml выглядят примерно так же:

apache:
  name: apache2
  state: started
# and so on for each service...


Наконец, вы можете запустить ваш плейбук командой:

ansible-playbook main.yml


После этого Ansible выполнит все операции, указанные в вашем плейбуке, на соответствующих хостах. 

Пожалуйста, убедитесь, что вы используете соответствующие названия сервисов для вашего конкретного дистрибутива Linux. В одних дистрибутивах Linux сервис Apache может называться apache2, а в других - httpd.

Ansible предоставляет возможности автоматизации не только установки и настройки серверов, но и других аспектов вашего рабочего процесса. Являясь мощным инструментом для обеспечения идентичности, Ansible может помочь в областях, таких как:

1. **Continuous Integration/Continuous Deployment (CI/CD):** Ansible может быть встроен в ваши CI/CD-конвейеры для автоматической настройки среды, развертывания кода на серверах, управления базами данных и т. д.

2. **Управление конфигурациями:** Ansible используется для управления сложными конфигурациями и обеспечения ее идентичности на всех уровнях. Вы можете определить конфигурацию в Ansible плейбуке и быть уверенными, что она будет одинаково применена на всех целевых хостах.

3. **Управление облачной инфраструктурой:** Ansible может общаться с различными облачными провайдерами и управлять ресурсами облака такими как AWS, GCP, Azure и др. с помощью соответствующих модулей. Это может быть использовано для автоматического создания и обслуживания облачной инфраструктуры по мере необходимости.

4. **Безопасность и Соблюдение нормативов:** Ansible может быть использован для автоматической проверки безопасности и соответствия нормам на целевых хостах. Скрипты проверки безопасности или проверки комплектующих могут быть интегрированы в Ansible плейбук и выполнены на серверах.

5. **Провиженинг и оркестрация:** Ansible поддерживает провизионинг физического оборудования, VMs и контейнеров, и может быть использован для оркестрации сложных многокомпонентных распространений. 

В заключение, Ansible - это мощный инструмент для автоматизации, который можно использовать для автоматизации во многих областях рабочего процесса IT. Обучение Ansible и интеграция его в ваш рабочий процесс может существенно упростить управление вашей инфраструктурой и улучшить производительность вашей команды.
